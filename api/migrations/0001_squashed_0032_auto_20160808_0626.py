# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-03-05 02:20
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import audiofield.fields

import api.models.auth
import api.models.dictionary
import utils.django.storage


class Migration(migrations.Migration):

    replaces = [('api', '0001_initial'), ('api', '0002_auto_20160417_2012'),
                ('api', '0003_auto_20160417_2032'), ('api', '0004_auto_20160419_0734'),
                ('api', '0005_auto_20160422_1827'), ('api', '0006_auto_20160424_0813'),
                ('api', '0007_add_order_to_tracks'), ('api', '0008_auto_20160424_0816'),
                ('api', '0009_auto_20160502_1740'), ('api', '0010_fork'),
                ('api', '0011_auto_20160503_0056'), ('api', '0012_auto_20160503_1248'),
                ('api', '0013_auto_20160503_1840'), ('api', '0014_auto_20160504_0024'),
                ('api', '0015_compositionversion_datetime'), ('api', '0016_auto_20160505_0306'),
                ('api', '0017_auto_20160509_0931'), ('api', '0018_auto_20160509_1020'),
                ('api', '0019_user_avatar'), ('api', '0020_auto_20160509_1325'),
                ('api', '0021_auto_20160510_0003'), ('api', '0022_auto_20160522_0821'),
                ('api', '0023_fullfil_fork_source_composition'), ('api', '0024_auto_20160522_0830'),
                ('api', '0025_auto_20160523_1357'), ('api', '0026_auto_20160523_1359'),
                ('api', '0027_auto_20160612_1101'), ('api', '0028_lastcompositionversionlink'),
                ('api', '0029_fill_last_composition_version_links'),
                ('api', '0030_auto_20160613_0100'), ('api', '0031_band_create_datetime'),
                ('api', '0032_auto_20160808_0626')]

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='Телефон')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=api.models.auth.avatar_upload_to, verbose_name='Аватар')),
                ('vk_profile', models.CharField(blank=True, db_index=True, default='', max_length=30, verbose_name='Профиль Вконтакте')),
                ('fb_profile', models.CharField(blank=True, db_index=True, default='', max_length=30, verbose_name='Профиль Facebook')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Пользователи',
                'verbose_name': 'Пользователь',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Band',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('description', models.TextField(blank=True, default='', max_length=200, verbose_name='Описание')),
                ('create_datetime', models.DateTimeField(auto_now_add=True)),
                ('group', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group', verbose_name='Авторизационная группа')),
            ],
            options={
                'verbose_name_plural': 'Музыкальные группы',
                'verbose_name': 'Музыкальная группа',
            },
        ),
        migrations.CreateModel(
            name='Composition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Название')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compositions', to='api.Band', verbose_name='Группа')),
            ],
            options={
                'verbose_name_plural': 'Композиции',
                'verbose_name': 'Композиция',
            },
        ),
        migrations.CreateModel(
            name='CompositionVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='composition_versions', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='api.Composition', verbose_name='Композиция')),
            ],
            options={
                'verbose_name_plural': 'Версии композиций',
                'ordering': ('-create_datetime',),
                'verbose_name': 'Версия композиции',
            },
        ),
        migrations.CreateModel(
            name='DiffCompositionVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diff_versions', to='api.Composition', verbose_name='Композиция')),
            ],
            options={
                'verbose_name_plural': 'Дифф-версии композиций',
                'verbose_name': 'Дифф-версия композиции',
            },
        ),
        migrations.CreateModel(
            name='DiffTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Сущность')),
                ('order', models.PositiveSmallIntegerField(verbose_name='Порядок')),
                ('diff_composition_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='api.DiffCompositionVersion', verbose_name='Версия композиции')),
            ],
            options={
                'verbose_name_plural': 'Дифф-дорожки',
                'ordering': ('diff_composition_version', 'order'),
                'verbose_name': 'Дифф-дорожка',
            },
        ),
        migrations.CreateModel(
            name='Fork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destination_composition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='as_destination_fork', to='api.Composition', verbose_name='Новая композиция')),
                ('source_composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='as_source_forks', to='api.Composition', verbose_name='Композиция, которую форкнули')),
                ('source_composition_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forks', to='api.CompositionVersion', verbose_name='Версия композиции')),
            ],
            options={
                'verbose_name_plural': 'Форки',
                'verbose_name': 'Форк',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
            ],
            options={
                'verbose_name_plural': 'Музыкальные жанры',
                'verbose_name': 'Музыкальный жанр',
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, unique=True, verbose_name='Название')),
                ('users', models.ManyToManyField(related_name='instruments', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name_plural': 'Музыкальные инструменты',
                'verbose_name': 'Музыкальный инструмент',
            },
        ),
        migrations.CreateModel(
            name='LastCompositionVersionLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('composition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='last_composition_version_link', to='api.Composition', verbose_name='Композиция')),
                ('composition_version', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='last_composition_version_link', to='api.CompositionVersion', verbose_name='Версия композиции')),
            ],
            options={
                'verbose_name_plural': 'Связи между последними версиями композиций и композициями',
                'verbose_name': 'Связь между последней версией композиции и композицией',
            },
        ),
        migrations.CreateModel(
            name='Leader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='leader', to='api.Band', verbose_name='Музыкальная группа')),
            ],
            options={
                'verbose_name_plural': 'Лидеры музыкальных групп',
                'verbose_name': 'Лидер музыкальной группы',
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Band', verbose_name='Группа')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name_plural': 'Участники музыкальных групп',
                'verbose_name': 'Участник музыкальной группы',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('text', models.CharField(max_length=500, verbose_name='Текст')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Band', verbose_name='Музыкальная группа')),
            ],
            options={
                'verbose_name_plural': 'Сообщения',
                'ordering': ('-datetime',),
                'verbose_name': 'Сообщение',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.CharField(max_length=32, unique=True)),
                ('refresh_token', models.CharField(max_length=32, unique=True)),
                ('time', models.FloatField(verbose_name='Время создания сессии')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name_plural': 'Сессии',
                'verbose_name': 'Сессия',
            },
        ),
        migrations.CreateModel(
            name='Sound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('file', audiofield.fields.AudioField(help_text='Allowed type - .mp3, .wav, .ogg', storage=utils.django.storage.OverwriteStorage(), upload_to=api.models.dictionary.sounds_path, verbose_name='Audio-файл')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sounds', to='api.Instrument', verbose_name='Инструмент')),
            ],
            options={
                'verbose_name_plural': 'Звуки',
                'verbose_name': 'Звук',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Сущность')),
                ('order', models.PositiveSmallIntegerField(verbose_name='Порядок')),
                ('composition_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='api.CompositionVersion', verbose_name='Версия композиции')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='api.Instrument', verbose_name='Инструмент')),
            ],
            options={
                'verbose_name_plural': 'Дорожки',
                'ordering': ('composition_version', 'order'),
                'verbose_name': 'Дорожка',
            },
        ),
        migrations.AddField(
            model_name='leader',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leader', to='api.Member', verbose_name='Участник музыкальной группы'),
        ),
        migrations.AddField(
            model_name='difftrack',
            name='instrument',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diff_tracks', to='api.Instrument', verbose_name='Инструмент'),
        ),
        migrations.AddField(
            model_name='composition',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='compositions', to='api.Genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='band',
            name='lead_members',
            field=models.ManyToManyField(related_name='as_leader_bands', through='api.Leader', to='api.Member', verbose_name='Лидер'),
        ),
        migrations.AlterUniqueTogether(
            name='track',
            unique_together=set([('composition_version', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='sound',
            unique_together=set([('instrument', 'name')]),
        ),
        migrations.AlterIndexTogether(
            name='message',
            index_together=set([('band', 'datetime')]),
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together=set([('user', 'band')]),
        ),
        migrations.AlterUniqueTogether(
            name='difftrack',
            unique_together=set([('diff_composition_version', 'order')]),
        ),
        migrations.AlterIndexTogether(
            name='diffcompositionversion',
            index_together=set([('composition', 'id')]),
        ),
        migrations.AlterIndexTogether(
            name='compositionversion',
            index_together=set([('composition', 'id')]),
        ),
    ]
