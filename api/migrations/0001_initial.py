# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-17 11:10
from __future__ import unicode_literals

import api.models.dictionary
import audiofield.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=15, verbose_name='Телефон')),
                ('vk_profile', models.CharField(blank=True, db_index=True, default='', max_length=30, verbose_name='Профиль Вконтакте')),
                ('fb_profile', models.CharField(blank=True, db_index=True, default='', max_length=30, verbose_name='Профиль Facebook')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Band',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('description', models.TextField(blank=True, default='', max_length=200, verbose_name='Описание')),
                ('group', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group', verbose_name='Авторизационная группа')),
            ],
            options={
                'verbose_name': 'Музыкальная группа',
                'verbose_name_plural': 'Музыкальные группы',
            },
        ),
        migrations.CreateModel(
            name='Composition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='Название')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compositions', to='api.Band', verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Композиция',
                'verbose_name_plural': 'Композиции',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Музыкальный жанр',
                'verbose_name_plural': 'Музыкальные жанры',
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Музыкальный инструмент',
                'verbose_name_plural': 'Музыкальные инструменты',
            },
        ),
        migrations.CreateModel(
            name='Leader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='leader', to='api.Band', verbose_name='Музыкальная группа')),
            ],
            options={
                'verbose_name': 'Лидер музыкальной группы',
                'verbose_name_plural': 'Лидеры музыкальных групп',
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Band', verbose_name='Группа')),
                ('instrument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='members', to='api.Instrument', verbose_name='Инструмент')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name_plural': 'Участники музыкальных групп',
                'verbose_name': 'Участник музыкальной группы',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.CharField(max_length=32, unique=True)),
                ('refresh_token', models.CharField(max_length=32, unique=True)),
                ('time', models.FloatField(verbose_name='Время создания сессии')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Сессия',
                'verbose_name_plural': 'Сессии',
            },
        ),
        migrations.CreateModel(
            name='Sound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('file', audiofield.fields.AudioField(help_text='Allowed type - .mp3, .wav, .ogg', upload_to=api.models.dictionary.sounds_path, verbose_name='Audio-файл')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sounds', to='api.Instrument', verbose_name='Инструмент')),
            ],
            options={
                'verbose_name_plural': 'Звуки',
                'verbose_name': 'Звук',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Дорожка')),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='api.Composition', verbose_name='Композиция')),
                ('instrument', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='api.Instrument', verbose_name='Инструмент')),
            ],
            options={
                'verbose_name': 'Дорожка',
                'verbose_name_plural': 'Дорожки',
            },
        ),
        migrations.CreateModel(
            name='TrackHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track', django.contrib.postgres.fields.jsonb.JSONField(verbose_name='Дорожка')),
                ('modified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks_modified', to=settings.AUTH_USER_MODEL, verbose_name='Автор изменения')),
                ('track_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_history', to='api.Track', verbose_name='Текущая версия дорожки')),
            ],
            options={
                'verbose_name': 'Старая версия дорожки',
                'verbose_name_plural': 'Старые версии дорожки',
            },
        ),
        migrations.AddField(
            model_name='leader',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leader', to='api.Member', verbose_name='Участник музыкальной группы'),
        ),
        migrations.AddField(
            model_name='composition',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='compositions', to='api.Genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='band',
            name='lead_members',
            field=models.ManyToManyField(related_name='as_leader_bands', through='api.Leader', to='api.Member', verbose_name='Лидер'),
        ),
        migrations.AlterUniqueTogether(
            name='sound',
            unique_together=set([('instrument', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together=set([('user', 'band')]),
        ),
    ]
